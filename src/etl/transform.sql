-- Data Transformation SQL
-- This file contains the transformation logic for building data marts
-- Templates can be dynamically generated by DSPy programs

-- ============================================================================
-- Fact Table: Orders with enriched metrics
-- ============================================================================
CREATE OR REPLACE TABLE fact_orders AS
SELECT 
    o.order_id,
    o.order_date,
    o.customer_id,
    o.product_id,
    o.region,
    o.quantity,
    o.price,
    o.quantity * o.price AS revenue,
    c.segment AS customer_segment,
    c.state AS customer_state,
    p.category AS product_category,
    p.cost AS product_cost,
    (o.quantity * o.price) - (o.quantity * p.cost) AS gross_profit,
    ((o.quantity * o.price) - (o.quantity * p.cost)) / NULLIF(o.quantity * o.price, 0) AS profit_margin,
    DATE_TRUNC('month', o.order_date) AS order_month,
    DATE_TRUNC('quarter', o.order_date) AS order_quarter,
    DATE_TRUNC('year', o.order_date) AS order_year,
    EXTRACT(YEAR FROM o.order_date) AS year,
    EXTRACT(QUARTER FROM o.order_date) AS quarter,
    EXTRACT(MONTH FROM o.order_date) AS month,
    EXTRACT(DOW FROM o.order_date) AS day_of_week
FROM orders o
LEFT JOIN customers c ON o.customer_id = c.customer_id
LEFT JOIN products p ON o.product_id = p.product_id;

-- ============================================================================
-- Dimension: Customer with aggregated metrics
-- ============================================================================
CREATE OR REPLACE TABLE dim_customer AS
SELECT 
    c.customer_id,
    c.customer_name,
    c.segment,
    c.state,
    c.signup_date,
    COUNT(DISTINCT o.order_id) AS lifetime_orders,
    SUM(o.quantity * o.price) AS lifetime_revenue,
    AVG(o.quantity * o.price) AS avg_order_value,
    MIN(o.order_date) AS first_order_date,
    MAX(o.order_date) AS last_order_date,
    DATE_DIFF('day', MAX(o.order_date), CURRENT_DATE) AS days_since_last_order
FROM customers c
LEFT JOIN orders o ON c.customer_id = o.customer_id
GROUP BY 
    c.customer_id,
    c.customer_name,
    c.segment,
    c.state,
    c.signup_date;

-- ============================================================================
-- Aggregate: Daily Revenue Metrics
-- ============================================================================
CREATE OR REPLACE TABLE fct_revenue_daily AS
SELECT 
    order_date,
    region,
    customer_segment,
    product_category,
    COUNT(DISTINCT order_id) AS order_count,
    COUNT(DISTINCT customer_id) AS customer_count,
    SUM(quantity) AS total_quantity,
    SUM(revenue) AS total_revenue,
    SUM(gross_profit) AS total_profit,
    AVG(revenue) AS avg_order_value,
    AVG(profit_margin) AS avg_profit_margin
FROM fact_orders
GROUP BY 
    order_date,
    region,
    customer_segment,
    product_category;

-- ============================================================================
-- Aggregate: Monthly KPIs
-- ============================================================================
CREATE OR REPLACE TABLE fct_kpis_monthly AS
SELECT 
    order_month,
    region,
    COUNT(DISTINCT order_id) AS order_count,
    COUNT(DISTINCT customer_id) AS customer_count,
    SUM(revenue) AS revenue,
    SUM(gross_profit) AS gross_profit,
    SUM(revenue) / NULLIF(COUNT(DISTINCT order_id), 0) AS aov,
    SUM(revenue) / NULLIF(COUNT(DISTINCT customer_id), 0) AS revenue_per_customer,
    AVG(profit_margin) AS avg_profit_margin
FROM fact_orders
GROUP BY 
    order_month,
    region
ORDER BY 
    order_month DESC,
    region;

-- ============================================================================
-- Aggregate: Product Performance
-- ============================================================================
CREATE OR REPLACE TABLE fct_product_performance AS
SELECT 
    p.product_id,
    p.product_name,
    p.category,
    COUNT(DISTINCT f.order_id) AS order_count,
    SUM(f.quantity) AS total_quantity_sold,
    SUM(f.revenue) AS total_revenue,
    SUM(f.gross_profit) AS total_profit,
    AVG(f.profit_margin) AS avg_profit_margin,
    MIN(f.order_date) AS first_sale_date,
    MAX(f.order_date) AS last_sale_date
FROM products p
LEFT JOIN fact_orders f ON p.product_id = f.product_id
GROUP BY 
    p.product_id,
    p.product_name,
    p.category
ORDER BY 
    total_revenue DESC;

-- ============================================================================
-- Aggregate: Customer Cohorts (by signup month)
-- ============================================================================
CREATE OR REPLACE TABLE fct_customer_cohorts AS
SELECT 
    DATE_TRUNC('month', c.signup_date) AS cohort_month,
    DATE_TRUNC('month', f.order_date) AS order_month,
    DATE_DIFF('month', DATE_TRUNC('month', c.signup_date), DATE_TRUNC('month', f.order_date)) AS months_since_signup,
    COUNT(DISTINCT c.customer_id) AS customer_count,
    COUNT(DISTINCT f.order_id) AS order_count,
    SUM(f.revenue) AS revenue
FROM customers c
LEFT JOIN fact_orders f ON c.customer_id = f.customer_id
WHERE f.order_date IS NOT NULL
GROUP BY 
    cohort_month,
    order_month,
    months_since_signup
ORDER BY 
    cohort_month,
    order_month;

